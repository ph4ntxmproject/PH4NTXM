#!/usr/bin/env python3
import gi, os, subprocess, sys, time
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Pango

NETWORK_INTERFACES = ["wlp1s0", "eno0"]
USER_TO_KILL = "ph4ntxm"
DELAY_BEFORE_NUKE = 1.5

def disable_network():
    for iface in NETWORK_INTERFACES:
        subprocess.run(["sudo", "ip", "link", "set", iface, "down"],
                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def kill_user_processes():
    this_pid = str(os.getpid())
    subprocess.run(f"pkill -u {USER_TO_KILL} -v -f {this_pid}", shell=True)

def clear_tmp_buffers():
    subprocess.run(["sudo", "rm", "-rf", "/tmp/*", "/var/tmp/*"],
                   stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sync"])

def memory_wipe():
    try:
        subprocess.run("sync", shell=True)
        subprocess.run("echo 3 > /proc/sys/vm/drop_caches", shell=True)
        subprocess.run("swapoff -a && swapon -a", shell=True)
    except Exception:
        pass

def force_shutdown():
    subprocess.run(["sudo", "systemctl", "--no-wall", "--force", "poweroff"])

def main():
    dialog = Gtk.MessageDialog(
        message_type=Gtk.MessageType.WARNING,
        buttons=Gtk.ButtonsType.YES_NO
    )
    dialog.set_title("Panic Button")
    dialog.format_secondary_text(
        "Nuke network, processes, sensitive data and force shutdown?"
    )

    response = dialog.run()
    dialog.destroy()

    if response == Gtk.ResponseType.YES:
        progress_window = Gtk.Window()
        progress_window.set_decorated(False)
        progress_window.set_default_size(400, 150)
        progress_window.set_modal(True)
        progress_window.set_position(Gtk.WindowPosition.CENTER)

        label = Gtk.Label()
        label.set_text("SYSTEM IN PANIC âž¡ NUKING...!")
        label.set_line_wrap(True)
        label.set_justify(Gtk.Justification.CENTER)
        label.override_font(Pango.FontDescription("Sans Bold 16"))

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        vbox.set_valign(Gtk.Align.CENTER)
        vbox.set_halign(Gtk.Align.CENTER)
        vbox.pack_start(label, True, True, 0)

        progress_window.add(vbox)
        progress_window.show_all()

        start = time.time()
        while time.time() - start < DELAY_BEFORE_NUKE:
            while Gtk.events_pending():
                Gtk.main_iteration()
            time.sleep(0.05)

        disable_network()
        kill_user_processes()
        clear_tmp_buffers()
        memory_wipe()
        progress_window.destroy()
        force_shutdown()
    else:
        sys.exit(0)

if __name__ == "__main__":
    main()
